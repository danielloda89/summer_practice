# bot = telebot.TeleBot('5485915394:AAEzU-jJOV7JlUIsSDF4H88nJeXFV6eAiZY')
import telebot
import sys
import mymodule
from telebot import types

#–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
test_id = ""
global test2
un_id = 0
const = 0
glob_lat = 0
glob_long = 0


bot = telebot.TeleBot('5582565908:AAH67yJGGhA68f_7b-Gq-alaNr5rGR__vXA')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
user_dict = {}  # {1234567890: {'photo': photo_id, 'caption': some_text}}


    # ------------------------------------------–ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –ë–û–¢–ê, –ú–ï–ù–Æ----------------------------------------------------------

@bot.message_handler(commands=['start'])
def welcome(message):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    driver = types.KeyboardButton("üöò Driver")  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    footer = types.KeyboardButton("üßçüèª Footer")  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏

    markup.add(driver, footer)  # –í —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
    bot.send_message(message.chat.id, "We Apologize Greatly\nMost of ours buttons works only after you would push them second time\n")
    bot.send_message(message.chat.id, "ÙÄå§ Welcome,{0.first_name}!\nI'm a <b>{1.first_name}</b>,"
                                      "bot designed to help you find a parking spot.\nPlease,choose your role:"
                     .format(message.from_user, bot.get_me()), parse_mode='html',
                     reply_markup=markup)  # –ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º


@bot.message_handler(content_types=['text'])
def action(message):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    Button_parking_search = types.KeyboardButton(text="Parking search")  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    Button_refresh_geo = types.KeyboardButton(text="Refresh Geo")

    Button_Driver_Manual = types.KeyboardButton("Driver Manual")  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    Button_Ped_Manual = types.KeyboardButton("Pedestrian Manual")  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    Back_To_Menu = types.KeyboardButton("‚Ü©Ô∏é Back to menu")  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏

    # Button_Take_A_Picture = types.KeyboardButton('Submit a parking photo')  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏\
    
    Driver = types.KeyboardButton("üöò Driver")  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    Footer = types.KeyboardButton("üßçüèª Footer")  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏

    if message.chat.type == 'private':  # –ï—Å–ª–∏ –ª–∏—á–Ω—ã–π —á–∞—Ç (–ë–æ—Ç–∞ –∏ —á–µ–ª–æ–≤–µ–∫–∞) 1 –Ω–∞ 1
        if message.text == 'üöò Driver':  # –ï—Å–ª–∏ –ø—Ä–æ–∂–∞—Ç–∞ –¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞


            # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ id –∏ driver –Ω—É–∂–Ω—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
            us_id = message.from_user.id
            s = 'Driver'
            mymodule.proverka_id(uid=us_id)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ id
            mymodule.update_status(uid=us_id, st=s)  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            mymodule.status_check(uid=us_id, st=s)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            markup.add(Button_parking_search, Button_Driver_Manual, Back_To_Menu)  # –í —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
            bot.send_message(message.chat.id, "üìù Please, be careful while driving, select an action:",
                             reply_markup=markup)  # –ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ


        elif message.text == 'üßçüèª Footer':  # –ï—Å–ª–∏ –ø—Ä–æ–∂–∞—Ç–∞ –¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞

            global un_id
            us_id = message.from_user.id
            un_id = us_id
            s = 'Footer'
            mymodule.proverka_id(uid=us_id)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ id
            mymodule.update_status(uid=us_id, st=s)  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            mymodule.status_check(uid=us_id, st=s)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            mymodule.get_status(uid=us_id)

            markup.add(Button_refresh_geo, Button_Ped_Manual, Back_To_Menu)  # –í —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
            bot.send_message(message.chat.id, "üìù Good walk, select an action:",
                             reply_markup=markup)  # –ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ


            if  message.text == 'Refresh Area':
                
                pass

        # elif message.text == 'Submit a parking photo': #–ï—Å–ª–∏ –ø—Ä–æ–∂–∞—Ç–∞ –¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        #     bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É.') #–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        #     bot.register_next_step_handler(message, photo_handler) #–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥,–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è photo_handler

        elif message.text == '‚Ü©Ô∏é Back to menu':  # –ï—Å–ª–∏ –ø—Ä–æ–∂–∞—Ç–∞ –¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            markup.add(Driver, Footer)  # –í —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
            bot.send_message(message.chat.id, "üìù You moved back to <b>menu</b>."
                                              "\n\nPlease, select an action:", parse_mode="html",
                             reply_markup=markup)  # –ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif message.text == 'Parking search':

            sendto = types.ForceReply(selective=False)
            msg = bot.send_message(message.chat.id,
                                   "Select Radius of Search Circle\nFor example if you input one of these numbers:\n –í–≤–µ–¥–∏ 0.001 —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞–ª–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∞–º–∏—ã\n2 = 3km-radius\n4 = 1.5km-radius\nBe careful you need to input numbers not a radius", reply_markup=sendto)  # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞


            bot.register_next_step_handler(msg, test)  # –ñ–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç
        elif message.text == 'Refresh Geo':


            mss = bot.send_message(message.chat.id,"Please Share Your Location")
            
            bot.register_next_step_handler(mss, ff)
        elif message.text == "Inactive":
            mss = bot.send_message(message.chat.id, "Search Stopped")
            bot.register_next_step_handler(mss, stop_search)
        
        elif message.text == "Driver Manual":
            bot.send_message(message.chat.id,"<b>Driver Manual</b>\n1.Press button <b>Parking Search</b> if you want to find a place for your car\n2.Lately you need to input a <b>NUMBER</b> for define in which size of radius we'll gonna search for a place\n1=6km\n2=3km\n3=1.5km\nBe careful you need to input <b>NUMBER</b> not a radius or words\4.Send geo - on this step you will send you're location\n5. JUST WAIT\nWe're doing our best to find you best place for parking\nWith love bonch.team"
            .format(message.from_user, bot.get_me()), parse_mode='html')
        
        elif message.text == "Pedestrian Manual":
            bot.send_message(message.chat.id,"<b>Pedestrian Manual</b>\n1.Press button Refresh Geo twice to share you're location with us\n2.Press <b>Send Geo</b> to share your location with us\n3.After you've shared if there are exsist driver around you\nYou will get offer and options to chose Accept/Decline\n4.After Accepting offer you need to take a shot of parking place or upload a photo from your library then add small description which will help driver to find this parking place\n<b>Important</b>: You have button <b>Inactive</b> after you end your offer or if you want to end session you<b>MUST</b> press this button twice or else you'll get a lot of spam\nwith love bonch.team".format(message.from_user, bot.get_me()), parse_mode='html')




@bot.message_handler(content_types=["text"])
def stop_search(message):
    message = bot.send_message(message.chat.id, text="Bye-Bye")

    mymodule.unvailable(uid=un_id)

@bot.message_handler(content_types=["text"])
def test(message):

    constant = message.text # –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  
    global const
    const = float(constant)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    Button_parking_search = types.KeyboardButton(text="Send geo", request_location=True)
    markup.add(Button_parking_search)
    bot.send_message(message.chat.id, 'OK', reply_markup=markup)  # –ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ

@bot.message_handler(commands=['ped'])
def ff(message):
    con = message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    Button_Inactive = types.KeyboardButton(text="Inactive")
    Button_refresh_geo= types.KeyboardButton(text="Send Geo", request_location=True )
    markup.add(Button_refresh_geo, Button_Inactive)
    bot.send_message(message.chat.id, 'OK', reply_markup=markup)

    
@bot.message_handler(content_types=["location"])
def location(message):
    uid = message.from_user.id
    if mymodule.get_status(uid=uid) == "Driver":
        bot.send_message(message.chat.id, "–ò–¥–µ—Ç –ø–æ–∏—Å–∫...")
        if message.location is not None:  # –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –µ—Å—Ç—å
            global glob_lat
            global glob_long

            print(message.location)  # –í—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
            print("latitude: %s; longitude: %s" % (message.location.latitude, message.location.longitude))  # –í—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏

        #------------------------------------------–ü–†–ò–ù–Ø–¢–ò–ï –ì–ï–û–î–ê–ù–ù–´–• –ê–í–¢–û–ú–û–ë–ò–õ–ò–°–¢–ê----------------------------------------------------------

            Baz_Latitude_Avto = message.location.latitude  # Latitude –Ω–∞—à–µ–π –≥–æ–µ–ø–æ–∑–∏—Ü–∏–∏
            Baz_Longitude_Avto = message.location.longitude  # Longitude –Ω–∞—à–µ–π –≥–æ–µ–ø–æ–∑–∏—Ü–∏–∏

            glob_lat = (Baz_Latitude_Avto)
            glob_long = (Baz_Longitude_Avto)

              # ID —á–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mymodule.update_location(uid=uid, lat=Baz_Latitude_Avto, lon=Baz_Longitude_Avto)  # —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —è—á–µ–π–∫—É —é–∑–µ—Ä—ã –ø–æ–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            flist = []  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –Ω–µ –≤–∞–∂–Ω–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–æ–π
            mymodule.transition(dri="Footer", lll=flist)  # —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ –ª–∏—Å—Ç
            print(flist)

        #------------------------------------------–ü–ï–†–ï–ú–ï–ù–ù–´–ï-–ö–û–ù–°–¢–ê–ù–¢–´----------------------------------------------------------

            const_Tochka__Max_latitude = 6.66  # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–π –≥–µ–æ–ø–æ–∑—Ü–∏–∏ –¥–æ latitude –ø—Ä–∏ 0,001 –≥—Ä–∞–¥—É—Å–∞—Ö
            const_Tochka_Max_longitude = 6.78  # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–π –≥–µ–æ–ø–æ–∑—Ü–∏–∏ –¥–æ longitude –ø—Ä–∏ 0,001 –≥—Ä–∞–¥—É—Å–∞—Ö

            global const
            Vo_Skolko_Raz_Um_Radius = const  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ - —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–¥–∏—É—Å –¥–æ latitude/longitude

            Korrektirovka_Gorizontali = 4  # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω–∞—Ç–ª—å–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —Ä–∞–¥–∏—É—Å–æ–≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π

            Pogreshost_Lat = 0.0016667223 # –ü–æ–≥—Ä–µ—â–Ω–æ—Å—Ç—å latitude

            Pogreshost_Long = 0.0032819739 # –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å longitude

            Const_S_zona = 180.6192 # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –∑–æ–Ω—ã –ø—Ä–∏ 0,001 –≥—Ä–∞–¥—É—Å–∞—Ö

            Gradus = 0.001

        # ---------------------------–ü–û–ò–°–ö latitude –ò longitude –í–ï–†–¢–ò–ö–ê–õ–¨–ù–´–• –ò –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–´–• –û–¢–ö–õ–û–ù–ï–ù–ò–ô, –°–û–ó–î–ê–ù–ò–ï –ó–û–ù–´ –ê–í–¢–û–ú–û–ë–ò–õ–ò–°–¢–ê--------------------------------------------------

            Vverh_Tochka__Max_latitude = Baz_Latitude_Avto + ((Baz_Latitude_Avto * Gradus) / Vo_Skolko_Raz_Um_Radius)  # Latitude —Ç–æ—á–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

            print("Vverh_Tochka__Max_latitude: ", Vverh_Tochka__Max_latitude)  # latitude —Ç–æ—á–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            print("Vverh_Tochka_Max_longitude: ", Baz_Longitude_Avto)  # longitude —Ç–æ—á–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

            Vniz_Tochka__Max_latitude = Baz_Latitude_Avto - ((Baz_Latitude_Avto * Gradus) / Vo_Skolko_Raz_Um_Radius)  # Latitude —Ç–æ—á–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

            print("Vniz_Tochka__Max_latitude: ", Vniz_Tochka__Max_latitude)  # latitude —Ç–æ—á–∫–∏ –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            print("Vniz_Tochka_Max_longitude: ", Baz_Longitude_Avto)  # longitude —Ç–æ—á–∫–∏ –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

            Vpravo_Tochka__Max_longitude = Baz_Longitude_Avto + (((Baz_Longitude_Avto * Gradus) * Korrektirovka_Gorizontali) / Vo_Skolko_Raz_Um_Radius)  # Latitude —Ç–æ—á–∫–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

            print("Vniz_Tochka__Max_latitude: ", Baz_Latitude_Avto)  # latitude —Ç–æ—á–∫–∏ –ø—Ä–∞–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            print("Vniz_Tochka_Max_longitude: ", Vpravo_Tochka__Max_longitude)  # longitude —Ç–æ—á–∫–∏ –ø—Ä–∞–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

            Vlevo_Tochka__Max_longitude = Baz_Longitude_Avto - (((Baz_Longitude_Avto * Gradus) * Korrektirovka_Gorizontali) / Vo_Skolko_Raz_Um_Radius)  # Latitude —Ç–æ—á–∫–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ª–µ–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

            print("Vniz_Tochka__Max_latitude: ", Baz_Latitude_Avto)  # latitude —Ç–æ—á–∫–∏ –ª–µ–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            print("Vniz_Tochka_Max_longitude: ", Vlevo_Tochka__Max_longitude)  # longitude —Ç–æ—á–∫–∏ –ª–µ–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

            Vverh_Tochka__Max_latitude_Pogr_Plus = Vverh_Tochka__Max_latitude
            Vverh_Tochka__Max_latitude_Pogr_Plus = Vverh_Tochka__Max_latitude_Pogr_Plus + ((Pogreshost_Lat * Vverh_Tochka__Max_latitude_Pogr_Plus) / 100)  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Latitude —Ç–æ—á–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤–≤–µ—Ä—Ö
            print("Vverh_Tochka__Max_latitude_Pogr: ", Vverh_Tochka__Max_latitude_Pogr_Plus)

            Vniz_Tochka__Max_latitude_Pogr_Minus = Vniz_Tochka__Max_latitude
            Vniz_Tochka__Max_latitude_Pogr_Minus = Vniz_Tochka__Max_latitude_Pogr_Minus - ((Pogreshost_Lat * Vniz_Tochka__Max_latitude_Pogr_Minus) / 100)  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Latitude —Ç–æ—á–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤–Ω–∏–∑
            print("Baz_Latitude_Pogr_Minus: ", Vniz_Tochka__Max_latitude_Pogr_Minus)

            Vpravo_Tochka__Max_longitude_Pogr_Plus = Vpravo_Tochka__Max_longitude
            Vpravo_Tochka__Max_longitude_Pogr_Plus = Vpravo_Tochka__Max_longitude_Pogr_Plus + ((Pogreshost_Long * Vpravo_Tochka__Max_longitude_Pogr_Plus) / 100)  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Latitude —Ç–æ—á–∫–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤–ø—Ä–∞–≤–æ
            print("Baz_Longitude_Pogr_Plus: ", Vpravo_Tochka__Max_longitude_Pogr_Plus)

            Vlevo_Tochka__Max_longitude_Pogr_Minus = Vlevo_Tochka__Max_longitude
            Vlevo_Tochka__Max_longitude_Pogr_Minus = Vlevo_Tochka__Max_longitude_Pogr_Minus - ((Pogreshost_Long * Vlevo_Tochka__Max_longitude_Pogr_Minus) / 100)  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Latitude —Ç–æ—á–∫–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ª–µ–≤–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤–ª–µ–≤–æ
            print("Baz_Longitude_Pogr_Minus: ", Vlevo_Tochka__Max_longitude_Pogr_Minus)

        # ----------------------------------------------------–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –°–û–ó–î–ê–ù–ù–û–ô –ó–û–ù–´------------------------------------------------------------------------------------------

            S_Zona = Const_S_zona / (Vo_Skolko_Raz_Um_Radius * 2)

            print("S_Zona: ", S_Zona, " km")  # –ü–ª–æ—â–∞–¥—å —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–æ–Ω—ã

            Radius_Vverh_Vniz = const_Tochka__Max_latitude / Vo_Skolko_Raz_Um_Radius # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞
            Radius_Vlevo_Vpravo = const_Tochka_Max_longitude / Vo_Skolko_Raz_Um_Radius # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞

            print("Vertical radius value: ", Radius_Vverh_Vniz, " km")  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –∑–æ–Ω—ã
            print("Gorizontal radius value: ", Radius_Vlevo_Vpravo, " km")  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –∑–æ–Ω—ã

            # ------------------------------------------–ü–†–û–í–ï–†–ö–ê –í–•–û–î–ê –¢–û–ß–ö–ò –ü–ï–®–ï–•–û–î–ê –í –ó–û–ù–£ –ê–í–¢–û–ú–û–ë–ò–õ–ò–°–¢–ê---------------------------------------
            
            counts = len(flist)
            
            true = 0;
            false = 0;
            count = 0

      
            for count in range(counts):
                
                if((flist[count][1] < Vverh_Tochka__Max_latitude) and (flist[count][1] > Vniz_Tochka__Max_latitude)):
                    #goes to the next checkpoint
                    
                    pass
                elif not ((flist[count][1] < Vverh_Tochka__Max_latitude) and (flist[count][1] > Vniz_Tochka__Max_latitude)):
                    if ((flist[count][1] < Vverh_Tochka__Max_latitude_Pogr_Plus) and (flist[count][1] > Vniz_Tochka__Max_latitude_Pogr_Minus)):
                       
                        pass
                        #goes to the next point
                    else :
                        #marker unusable
                        
                        flist[count].insert(3, 'unusable')
                        pass
                        continue

                        
                if((flist[count][2] > Vlevo_Tochka__Max_longitude) and (flist[count][2] < Vpravo_Tochka__Max_longitude)): 
                    flist[count].insert(3, 'usable')
                   
                    pass
                elif not ((flist[count][2] > Vlevo_Tochka__Max_longitude) and (flist[count][2] < Vpravo_Tochka__Max_longitude)): 
                    if((flist[count][2] > Vlevo_Tochka__Max_longitude_Pogr_Minus) and (flist[count][2] < Vpravo_Tochka__Max_longitude_Pogr_Plus)):
                        

                        flist[count].insert(3, 'unusable')
                        #marker Usable
                    else:
                       
                        #marker unusable
                        flist[count].insert(3, 'unusable')
                        continue
            check = 0

            for i in range(counts):
                if flist[i][3] == "unusable":
                    check += 1
                  

            if check == counts:
                bot.send_message(message.chat.id, "There is none pedestrians around which would fit to your necessaries")

            
        # ------------------------------------------–û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –û–¢ –ê–í–¢–û–ú–û–ë–ò–õ–ò–°–¢–ê –ü–ï–®–ï–•–û–î–£----------------------------------------------------------
            
              # –í–≤–æ–¥–∏—Ç—Å—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è (ID –ü–µ—à–µ—Ö–æ–¥–∞)
            markup = types.InlineKeyboardMarkup(row_width=2)
            Button_Yes = types.InlineKeyboardButton("Yes", callback_data='yes')  # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–∞—Ç–∏—è, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è Yes
            Button_No = types.InlineKeyboardButton("No", callback_data='no')  # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–∞—Ç–∏—è, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è No
            markup.add(Button_Yes, Button_No)  # –í –º–∞–∫–µ—Ç –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
            global test2
            test2 = message.chat.id
            for i in range(counts):
                if flist[i][3] == "usable":
                    second_id = flist[i][0]
                    bot.send_location(second_id, message.location.latitude, message.location.longitude)  # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
                    bot.send_message(second_id, "Accept request ‚¨ÜÔ∏è ?",
                                    reply_markup=markup)  # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ (–î–∞/–Ω–µ—Ç)


                else:
                    continue
    else:
        Baz_Latitude_Peshehod = message.location.latitude  # Latitude –Ω–∞—à–µ–π –≥–æ–µ–ø–æ–∑–∏—Ü–∏–∏
        Baz_Longitude_Peshehod = message.location.longitude
        print("–î–∞–Ω–Ω—ã–µ –ø–µ—à–µ—Ö–æ–¥–∞", Baz_Latitude_Peshehod, Baz_Longitude_Peshehod)
        mymodule.update_location(uid=uid, lat=Baz_Latitude_Peshehod, lon=Baz_Longitude_Peshehod)
    # ------------------------------------------–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨, –û–¢–í–ï–¢ –ü–ï–®–ï–•–û–î–ê –ù–ê –ó–ê–ü–†–û–° –ê–í–¢–û–ú–û–ë–ò–õ–ò–°–¢–ê----------------------------------------------------------

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global test2
    main_id = test2 # –ú–æ–π ID –í–æ–¥–∏—Ç–µ–ª—è

    try:
        if call.message:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–æ–¥–∏—Ç–µ–ª—é –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É
            if call.data == 'yes':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ", reply_markup=None)  # –ó–∞–º–µ–Ω—è–µ–º InLine –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ç–µ–∫—Å—Ç
                bot.register_next_step_handler(call, photo_handler)  # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥,–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è photo_handler
            elif call.data == 'no':
                bot.send_message(main_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–æ–¥–∏—Ç–µ–ª—é –æ—Ç–≤–µ—Ç

            # –ó–∞–º–µ–Ω—è–µ–º InLine –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ç–µ–∫—Å—Ç
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                                  reply_markup=None)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–µ –∑–Ω–∞—é –ø–æ–∫–∞ –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–∏–ª —Ç–∞–∫
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                      text="–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å")

    except Exception as e:
        print(repr(e))


    # ------------------------------------------–ü–ï–®–ï–•–û–î –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –§–û–¢–û –° –¢–ï–ö–°–¢–û–ú –ê–í–¢–û–ú–û–ë–ò–õ–ò–°–¢–£----------------------------------------------------------

@bot.message_handler(content_types=["photo"])
def photo_handler(message):

    try:
        # –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ - –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –∏ —É–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if user_dict.get(message.chat.id) is not None:
            user_dict[message.chat.id]['photo'] = message.photo[len(message.photo) - 1].file_id
            user_dict[message.chat.id]['caption'] = ''

        else:
            # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            user_dict[message.chat.id] = {'photo': '', 'caption': ''}
            user_dict[message.chat.id]['photo'] = message.photo[len(message.photo) - 1].file_id
    except Exception as e:
        bot.reply_to(message, e)
    else:
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ')  # –ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.register_next_step_handler(message, text_handler)  # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥,–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è text_handler


def text_handler(message):
    global test2
    main_id = test2
    global glob_lat
    global glob_long

    glob_lat = str(glob_lat)+" "+str(glob_long)
    # –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    user_dict[message.chat.id]['caption'] = message.text

    #us_id = message.from_user.id
    #main_id = us_id  # –í–≤–æ–¥–∏—Ç—Å—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ç–æ (ID –í–æ–¥–∏—Ç–µ–ª—è)
    bot.send_photo(
        main_id,
        photo=user_dict[message.chat.id]['photo'],  # –§–æ—Ç–æ
        caption=user_dict[message.chat.id]['caption'],  # –ü–æ–¥–ø–∏—Å—å

        parse_mode='HTML'
    )
    bot.send_message(main_id, text="Location"+" "+glob_lat)
    bot.send_message(message.chat.id, '–í–∞—à–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')  # –ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ


bot.polling(none_stop=True, interval=0)








